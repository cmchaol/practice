
* summary

|    | 2 blocks                     | 1st      | 2nd      |          |
|    |                              |          |          | result   |
|----+------------------------------+----------+----------+----------|
| 20 | session & session_name       | included | included | positive |
|    |                              |          |          |          |
| 22 |                              | included | none     | negative |
|    |                              |          |          |          |
| 24 |                              | none     | included | negative |
|    |                              |          |          |          |
| 26 |                              | none     | none     | negative |
|    |                              |          |          |          |
| 28 | session without session_name | included | included | negative |

[2016-02-26 Fri 10:47]

Org-mode version 8.2.10 

Session name is mandatory to get the positive session results under my test.


* Session-based Evaluation

An environment is created containing data objects that persist between different source code blocks.

Once a code block is finished, it is often best to execute it outside of a session, so the state of the environment in which it executes will be certain.


http://orgmode.org/worg/org-contrib/babel/intro.html#orgheadline14



* 20  session & session_name


#+HEADERS:  :results raw
#+HEADERS:  :results silent
#+HEADERS:  :session session_name_20
#+BEGIN_SRC sh

PN="tutorial3" 
# define the variable of the Project Name, $PN

echo 'echo from the block of variable definition, $PN =' $PN

#+END_SRC


#+HEADERS:  :results raw
#+HEADERS:  :results silent
#+HEADERS:  :session session_name_20
#+BEGIN_SRC sh

# echo  $PN
echo 'echo outside the block of variable definition, $PN =' $PN

#+END_SRC




* 22  session & session_name


#+HEADERS:  :results raw
#+HEADERS:  :results silent
#+HEADERS:  :session session_name_22
#+BEGIN_SRC sh

PN="tutorial3" 
# define the variable of the Project Name, $PN

echo 'echo from the block of variable definition, $PN =' $PN

#+END_SRC


#+HEADERS:  :results raw
#+HEADERS:  :results silent
#+BEGIN_SRC sh

# echo  $PN
echo 'echo outside the block of variable definition, $PN =' $PN

#+END_SRC




* 24  session & session_name


#+HEADERS:  :results raw
#+HEADERS:  :results silent
#+BEGIN_SRC sh

PN="tutorial3" 
# define the variable of the Project Name, $PN

echo 'echo from the block of variable definition, $PN =' $PN

#+END_SRC


#+HEADERS:  :results raw
#+HEADERS:  :results silent
#+HEADERS:  :session session_name_24
#+BEGIN_SRC sh

# echo  $PN
echo 'echo outside the block of variable definition, $PN =' $PN

#+END_SRC




* 26  session & session_name


#+HEADERS:  :results raw
#+HEADERS:  :results silent
#+BEGIN_SRC sh

PN="tutorial3" 
# define the variable of the Project Name, $PN

echo 'echo from the block of variable definition, $PN =' $PN

#+END_SRC


#+HEADERS:  :results raw
#+HEADERS:  :results silent
#+BEGIN_SRC sh

# echo  $PN
echo 'echo outside the block of variable definition, $PN =' $PN

#+END_SRC




* 28  session without session_name


#+HEADERS:  :results raw
#+HEADERS:  :results silent
#+HEADERS:  :session 
#+BEGIN_SRC sh

PN="tutorial3" 
# define the variable of the Project Name, $PN

echo 'echo from the block of variable definition, $PN =' $PN

#+END_SRC


#+HEADERS:  :results raw
#+HEADERS:  :results silent
#+HEADERS:  :session 
#+BEGIN_SRC sh

# echo  $PN
echo 'echo outside the block of variable definition, $PN =' $PN

#+END_SRC








* templates

#+HEADERS:  :session session_name_1
#+HEADERS:  :results silent

#+HEADERS:  :results raw
#+BEGIN_SRC sh

PN="tutorial3" 
# define the variable of the Project Name, $PN

echo 'echo from the block of variable definition, $PN =' $PN

#+END_SRC
