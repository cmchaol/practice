

* 2 summary

|  2 | summary                      |                                         |
|    |                              |                                         |
|  6 | define variables             |                                         |
|  7 |                              | view variables (optional)               |
|    |                              |                                         |
|----+------------------------------+-----------------------------------------|
| 10 | Creating a project structure |                                         |
| 12 |                              | view the project structure (optional)   |
| 14 |                              | delete the project structure (optional) |
|    |                              |                                         |
|----+------------------------------+-----------------------------------------|
| 20 | item.py                      |                                         |
| 22 |                              | view item.py (optional)                 |
|    |                              |                                         |
|----+------------------------------+-----------------------------------------|
| 30 | dmoz_spider.py               |                                         |
| 32 |                              | view dmoz_spider.py (optional)          |
|    |                              |                                         |
|----+------------------------------+-----------------------------------------|
| 40 | crawling                     |                                         |
| 42 |                              | view product files (optional)           |
|    |                              |                                         |
|----+------------------------------+-----------------------------------------|
| 92 |                              | blank sh babel block                    |
| 94 |                              | Session-based Evaluation                |
|    |                              |                                         |


* 6 define variables   


#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

PN="tutorial3" 
# define the variable of the Project Name, $PN

#+END_SRC

** 7 view variables (optional)

#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

echo $PN

#+END_SRC





* 10 Creating a project structure


#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

scrapy startproject $PN

#+END_SRC

** 12 view the project structure (optional)

#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

tree $PN

#+END_SRC


** 14 delete the project structure (optional)

#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

rm -r $PN

ls $PN

#+END_SRC


* 20 item.py


#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

cat > $PN/$PN/items.py << EOF

import scrapy

class DmozItem(scrapy.Item):
    title = scrapy.Field()
    link = scrapy.Field()
    desc = scrapy.Field()

EOF

#+END_SRC


** 22 view item.py (optional)

#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

cat $PN/$PN/items.py

#+END_SRC

   
* 30 dmoz_spider.py

#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

cat > $PN/$PN/spiders/dmoz_spider.py << EOF

import scrapy

class DmozSpider(scrapy.Spider):
    name = "dmoz"
    allowed_domains = ["dmoz.org"]
    start_urls = [
        "http://www.dmoz.org/Computers/Programming/Languages/Python/Books/",
        "http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"
    ]

    def parse(self, response):
        filename = response.url.split("/")[-2] + '.html'
        with open(filename, 'wb') as f:
            f.write(response.body)

EOF

#+END_SRC


** 32 view dmoz_spider.py (optional)

#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

cat  $PN/$PN/spiders/dmoz_spider.py 

#+END_SRC


* 40 crawling

#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

cd $PN

scrapy crawl dmoz

#+END_SRC


** 42 view product files (optional)

#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session PN
#+BEGIN_SRC sh

ls 

#+END_SRC


* 92 blank sh babel block

#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+BEGIN_SRC sh

#+END_SRC



#+HEADERS:  :results silent
#+HEADERS:  :results raw
#+HEADERS:  :session
#+BEGIN_SRC sh

#+END_SRC


* 94 Session-based Evaluation

  http://orgmode.org/worg/org-contrib/babel/intro.html#orgheadline14


For some languages, such as python, R, ruby and shell, it is possible to run an interactive session as an "inferior process" within Emacs. This means that an environment is created containing data objects that persist between different source code blocks. Babel supports evaluation of code within such sessions with the :session header argument. If the header argument is given a value then that will be used as the name of the session. Thus, it is possible to run separate simultaneous sessions in the same language.

Session-based evaluation is particularly useful for prototyping and debugging. The function org-babel-pop-to-session can be used to switch to the session buffer.

Once a code block is finished, it is often best to execute it outside of a session, so the state of the environment in which it executes will be certain.

With R, the session will be under the control of Emacs Speaks Statistics as usual, and the full power of ESS is thus still available, both in the R session, and when switching to the R code edit buffer with ​C-c '​.


http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-R.html#orgheadline5

does produce a file, by evaluating in :session
#+begin_src R :file 4.png :session :results graphics
library(lattice)
xyplot(1:10 ~ 1:10)
#+end_src

